name: Package Code

on:
  push:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  build_windows:
    runs-on: 'windows-latest'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']
    
    steps:
    - uses: actions/checkout@v3

    - name: Download Build Tools for Visual Studio 2019
      run: Invoke-WebRequest -Uri https://aka.ms/vs/16/release/vs_buildtools.exe -OutFile vs_buildtools.exe

    - name: Run vs_buildtools.exe install
      # run: ./vs_buildtools.exe --quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.14.31.17.1.x86.x64.Spectre --add Microsoft.VisualStudio.Component.VC.140 --includeRecommended
      run: ./vs_buildtools.exe --quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.v141.x86.x64 --add Microsoft.VisualStudio.Component.VC.140 --includeRecommended

    - uses: actions/setup-python@v3
      with:
        python-version: ${{ python-version }}
        cache-dependency-path: 'src/requirements.txt'

    - name: Set up Python virtual environment
      run: |
        python3 -m ensurepip
        python3 -m venv .venv
      if: ${{ python-version == '3.9' }}
    
    - name: Set up Pypy virtual environment
      run: |
        pypy3.9 -m ensurepip
        pypy3.9 -m venv .venv
      if: ${{ python-version == 'pypy-3.9' }}

    - name: Enter virtual environment
      run: .venv/Scripts/activate

    - name: Install dependencies
      run: |
        python -m pip install -U pip
        python -m pip install -U six setuptools wheel cython pyinstaller

    - name: Compile cythonized code
      run: python src/setup.py build_ext

    - name: Install Python dependencies
      run: python -m pip install -r src/requirements.txt

    - name: Create Python pyinstaller specfile
      run: pyi-makespec -F -n '${{ github.repository }}' -r package/${{ github.repository }}.cp39-win_amd64.pyd,dll,package/${{ github.repository }}.cp39-win_amd64.pyd --noconsole package/main.py
      if: ${{ python-version == '3.9' }}

    - name: Create Pypy pyinstaller specfile
      run: pyi-makespec -F -n '${{ github.repository }}' -r package/${{ github.repository }}.pypy39-pp73-win_amd64.pyd,dll,package/${{ github.repository }}.pypy39-pp73-win_amd64.pyd --noconsole package/main.py
      if: ${{ python-version == '3.9' }}

    - name: Build app with pyinstaller
      run: pyinstaller -y --dist release/windows-${{ matrix.python-version }}/ --clean ${{ github.repository }}.spec
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-${{ matrix.python-version }}
        path: release/windows-${{ matrix.python-version }}/

  build_ubuntu:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache-dependency-path: 'src/requirements.txt'

    - name: Update APT
      run: |
        sudo apt update
        sudo apt upgrade -y
      
    - name: Install Python dependencies
      run: sudo apt install -y python3.9-venv python3.9-dev python3-pip
      if: ${{ python-version == '3.9' }}

    - name: Install Pypy dependencies
      run: sudo apt install -y pypy3-dev
      if: ${{ python-version == 'pypy-3.9' }}

    - name: Set up Python virtual environment
      run: python3.9 -m venv .venv
      if: ${{ python-version == '3.9' }}

    - name: Set up Pypy virtual environment
      run: pypy3.9 -m venv .venv
      if: ${{ python-version == 'pypy-3.9' }}

    - name: Enter virtual environment
      run: bash .venv/bin/activate

    - name: Install dependencies and Cython
      run: |
        pip install -U pip
        pip install -U six setuptools wheel cython pyinstaller

    - name: Check if requirements.txt includes the gooey library
      run: echo "gooey_present=$(grep -ic gooey src/requirements.txt)" >> $GITHUB_ENV

    - name: Install Linux-specific dependencies
      run: sudo apt install build-essential libgtk-3-dev libjpeg zlib1g zlib1g-dev
      if: ${{ env.gooey_present > 0 }}

    - name: Install wxPython
      run: 
        pip download wxPython==4.1.1
        pip wheel wxPython-4.1.1.tar.gz
        rm six*.whl
        rm numpy*.whl
        rm Pillow*.whl
        pip install wxPython-4.1.1.tar.gz
        rm wxPython*.whl
      if: ${{ env.gooey_present > 0 }}

    - name: Install Python dependencies
      run: python -m pip install -r src/requirements.txt

    - name: Compile cythonized code 
      run: python src/setup.py build_ext

    - name: Create pyinstaller specfile
      run: pyi-makespec -F -n '${{ github.repository }}' -r package/compiled-ubuntu-${{ matrix.python-version }}/*,dll,package/compiled-ubuntu-${{ matrix.python-version }}/* --noconsole package/main.py

    - name: Build app with pyinstaller
      run: pyinstaller -y --dist release/ubuntu-${{ matrix.python-version }}/ --clean ${{ github.repository }}.spec
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-${{ matrix.python-version }}
        path: release/ubuntu-${{ matrix.python-version }}/

  compile_mac:
    runs-on: 'macos-latest'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', 'pypy-3.9']

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache-dependency-path: 'src/requirements.txt'

    - name: Set up Python virtual environment
      run: python3 -m venv .venv

    - name: Enter virtual environment
      run: sh .venv/bin/activate
    
    - name: Install dependencies and Cython
      run: |
        python3 -m pip install -U pip
        python3 -m pip install -U six setuptools wheel cython

    - name: Compile cythonized code 
      run: python3 src/setup.py build_ext

    - name: Enter virtual environment
      run: sh .venv/bin/activate

    - name: Install prerequisite Python dependencies
      run: |
        python3 -m pip install -U pip 
        python3 -m pip install -U six setuptools wheel pyinstaller

    - name: Install Python dependencies
      run: python3 -m pip install -r src/requirements.txt

    - uses: actions/download-artifact@v3
      with:
        name: compiled-mac-${{ matrix.python-version }}
        path: package/

    - name: Create pyinstaller specfile
      run: pyi-makespec -F -n 'FPS_Grapher' -r package/compiled-mac-${{ matrix.python-version }}/*,dll,package/compiled-mac-${{ matrix.python-version }}/* --noconsole package/main.py

    - name: Build app with pyinstaller
      run: pyinstaller -y --dist release/mac-${{ matrix.python-version }}/ --clean FPS_Grapher.spec
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mac-${{ matrix.python-version }}
        path: release/mac-${{ matrix.python-version }}/
  
  release:
    if: |
      startsWith(github.ref, 'refs/tags/release') &&
      github.base_ref == 'refs/heads/main'
      
    needs: [build_windows, build_ubuntu, build_mac]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
          python-version: ['3.9']
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3

    - run: |
        cd release/windows-latest-${{ matrix.python-version }}
        zip -r FPS_Grapher_Windows-${{ matrix.python-version }}.zip FPS_Grapher.exe

    - run: |
        cd release/ubuntu-latest-${{ matrix.python-version }}
        zip -r FPS_Grapher_Ubuntu-${{ matrix.python-version }}.zip FPS_Grapher
    
    - run: |
        cd release/mac-latest-${{ matrix.python-version }}
        zip -r FPS_Grapher_MacOS-$-{{python-version}}.zip FPS_Grapher.app 
    
    - uses: ncipollo/release-action@v1
      with:
        artifacts: |
          release/windows-${{ matrix.python-version }}/FPS_Grapher_Windows-${{ matrix.python-version }}.zip
          release/ubuntu-${{ matrix.python-version }}/FPS_Grapher_Ubuntu-${{ matrix.python-version }}.zip
          release/mac-${{ matrix.python-version }}/FPS_Grapher_MacOS-${{ matrix.python-version }}.zip
        bodyFile: 'CHANGELOG.md'
        allowUpdates: true
        replacesArtifacts: true
        tag: github.ref_name